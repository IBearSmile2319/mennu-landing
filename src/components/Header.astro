---
import Logo from "@/assets/svg/Logo.astro";
import NombreApp from "@/assets/svg/NombreApp.astro";
import Typography from "./ui/typography/Typography.astro";
import {
  getLangFromUrl,
  useTranslatedPath,
  useTranslations,
} from "@/i18n/utils";
import HamburgerButton from "./HamburgerButton.astro";
import { MOBILE_MENU_CONTENT_ID } from "@/consts/mobile-menu";
// remote last slash from pathname
const { pathname } = Astro.url;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translationPath = useTranslatedPath(lang);

const pages = [
  {
    name: t("header.business.link"),
    href: translationPath("/business"),
    active: pathname.includes(translationPath("/business")),
  },
  {
    name: t("header.advertisers.link"),
    href: translationPath("/advertisers"),
    active: pathname.includes(translationPath("/advertisers")),
  },
  {
    name: t("header.about.link"),
    href: translationPath("/about"),
    active: pathname.includes(translationPath("/about")),
  },
].map((page) => ({
  ...page,
  active: page.active ?? pathname === page.href,
}));
---

<header class="h-[100px] w-full bg-primary">
  <nav
    class="group flex w-full mx-auto max-w-[1280px] items-center gap-7 h-full px-4  justify-between lg:justify-normal"
  >
    <a href="/" class="flex items-center h-[60.29px] gap-2">
      <Logo size="60" />
      <NombreApp />
    </a>
    <!-- ocultar en mobile -->
    <ul class="items-center gap-4 h-full hidden lg:flex">
      {
        pages.map((page) => (
          <li class="flex items-center h-[56px] mt-2">
            <a
              href={page.href}
              class={`flex items-center gap-[8px] px-4 py-2 rounded-full ${page.active ? "bg-[#EEEEEE]" : ""}`}
            >
              <Typography
                variant="label"
                weight="large"
                color={page.active ? "primary" : "white"}
                align="center"
                class="font-medium"
              >
                {page.name}
              </Typography>
            </a>
          </li>
        ))
      }
    </ul>
    <!-- ocultar en desktop tendra un id=#menuMobileContent darle animacion al burger-->
    <HamburgerButton class:list={"block lg:hidden"} id="menuButton" />
    <div
      class="fixed inset-0 z-[888] flex w-screen flex-col items-center overflow-x-auto bg-primary px-4 lg:hidden"
      id={MOBILE_MENU_CONTENT_ID}
    >
    <aside class="flex min-h-16 w-full items-center justify-between h-[100px]">
      <span class="text-xl font-semibold uppercase text-secondary">Men√∫</span>
      <HamburgerButton id="innerMenuButton" />
    </aside>
    </div>
  </nav>
</header>

<style>
  #menuMobileContent {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s;
    scrollbar-gutter: stable;
  }

  #menuMobileContent.open {
    opacity: 1 !important;
    pointer-events: all;
  }

  /* #menuMobileContent {
    transition: opacity 0s;
  } */
  @media (prefers-reduced-motion) {
		#menuMobileContent {
			transition: opacity 0s;
		}
	}
</style>

<script>
	import { $ } from "@/lib/dom-selector"

	function toggleMenu(nav: HTMLElement | null, menuMobileContent: HTMLElement | null) {
		menuMobileContent?.classList.toggle("open")
		nav?.classList.toggle("open")
		document.body.classList.toggle("overflow-hidden")
		document.body.classList.toggle("lg:overflow-auto")
    // agregar la clase al html
    document.documentElement.classList.toggle("overflow-hidden");
    document.documentElement.classList.toggle("lg:overflow-auto");
	}

	document.addEventListener("astro:page-load", () => {
		const nav = $("nav")
		const menuButton = $("#menuButton")
		const innerMenuButton = $("#innerMenuButton")
		const menuMobileContext = $("#menuMobileContent")
    

		menuButton?.addEventListener("hamburgerButtonClicked", () => toggleMenu(nav, menuMobileContext))
		innerMenuButton?.addEventListener("hamburgerButtonClicked", () =>
			toggleMenu(nav, menuMobileContext)
		)

		if (menuMobileContext?.classList.contains("open")) {
			toggleMenu(nav, menuMobileContext)
		}
	})
</script>

